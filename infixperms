#!/usr/bin/env python
#encoding: utf-8
"""
Force permission of file in one or more dirs to be 0664 for files and 0775 for
dirs.

Author: Aurélien Gâteau
License: GPLv3+
"""
import asyncore
import logging
import os
import sys
from optparse import OptionParser

import pyinotify

import daemonutils

BLACKLIST = [".unison.tmp"]

def adjust_perms(path, dir):
    for bl in BLACKLIST:
        if bl in path:
            logging.info("Skipping %s, blacklisted", path)
            return
    perms = os.stat(path).st_mode & 0777
    if dir:
        expected = 0775
    else:
        expected = 0664
    if perms != expected:
        logging.info("Setting perms of %s to %s", path, oct(expected))
        os.chmod(path, expected)

class EventHandler(pyinotify.ProcessEvent):
    @daemonutils.exception_catcher
    def process_IN_CREATE(self, event):
        adjust_perms(event.pathname, event.dir)

    @daemonutils.exception_catcher
    def process_IN_ATTRIB(self, event):
        adjust_perms(event.pathname, event.dir)

@daemonutils.exception_catcher
def create_watches(dirs):
    wm = pyinotify.WatchManager()
    mask = pyinotify.IN_ATTRIB | pyinotify.IN_CREATE

    notifier = pyinotify.AsyncNotifier(wm, EventHandler())
    for dir in dirs:
        logging.info("Watching %s", dir)
        wdd = wm.add_watch(dir, mask, rec=True, auto_add=True)

USAGE = "%prog [options] <dir1> [<dir2>...]"

def main():
    parser = OptionParser(usage=USAGE)

    parser.add_option("-d", "--daemon",
                      action="store_true", dest="daemon", default=False,
                      help="Daemonize")

    parser.add_option("--pidfile",
                      dest="pid", default="",
                      help="Store pid in FILE", metavar="FILE")

    parser.add_option("--logfile",
                      dest="log", default="",
                      help="Log activity in FILE", metavar="FILE")

    (options, args) = parser.parse_args()

    if len(args) == 0:
        parser.error("Missing args")

    if options.pid != "":
        pid_file = open(options.pid, "w")
    else:
        pid_file = None

    logging_config = {
        "format": "%(asctime)s %(message)s",
        "level": logging.DEBUG
        }
    if options.log != "":
        logging_config["filename"] = options.log
    logging.basicConfig(**logging_config)


    if options.daemon:
        daemonutils.double_fork()

    if pid_file:
        pid_file.write(str(os.getpid()))
        pid_file.close()

    create_watches(args)
    asyncore.loop()

if __name__ == "__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
